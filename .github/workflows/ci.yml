name: CI

on: [push, pull_request]

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up build environment
      run: |
        sudo apt-get update
        sudo apt-get install -y clang libbsd-dev

    - name: Install Norminette
      run: |
        python3 -m pip install --upgrade pip setuptools
        python3 -m pip install norminette

    - name: Run Norminette
      run: norminette ft_*.c *.h

    - name: Build
      run: |
        export CC=clang
        make

    - name: Run tests
      run: |
        export CC=clang
        make -f Makefile.test test

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: libft_artifact
        path: ./libft.a
    - name: Notify Discord on success
      if: success()
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      uses: Ilshidur/action-discord@master
      with:
        args: "CI build for ${{ github.repository }} completed successfully!"
    - name: Notify Discord on failure
      if: failure()
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      uses: Ilshidur/action-discord@master
      with:
        args: "CI build for ${{ github.repository }} failed. Check the logs for details."

  build_and_release_on_tags:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build_and_test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up build environment
      run: |
        sudo apt-get update
        sudo apt-get install -y clang libbsd-dev

    - name: Download libft artifact
      uses: actions/download-artifact@v3
      with:
        name: libft_artifact
        path: .

    - name: Build and create archive
      run: |
        export CC=clang
        make -f Makefile.release release

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload release asset (zip)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./libft_release.zip
        asset_name: libft_release.zip
        asset_content_type: application/zip

    - name: Upload release asset (a)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./libft.a
        asset_name: libft.a
        asset_content_type: application/octet-stream